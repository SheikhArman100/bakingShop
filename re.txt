//register user
const registerUser = async (req, res) => {
  const { username, email, password } = req.body;
  const usernameExists = await User.findOne({ username });
  const emailExists = await User.findOne({ email });
  const newUser = new User({
    username: req.body.username,
    email: req.body.email,
    password: CryptoJS.AES.encrypt(
      req.body.password,
      process.env.PASS_SEC
    ).toString(),
  });
  try {
    if (!username || !email || !password) {
      res.status(400).json({ message: "Please fill all the fields" });
    } else if (password.length < 6) {
      return res
        .status(400)
        .json({ message: "Password less than 6 characters" });
    }
    //check email and username already used
    else if (usernameExists && emailExists) {
      res.status(400).json({ message: "Username and Email both already used" });
    } else if (usernameExists) {
      res.status(400).json({ message: "Username already used" });
    } else if (emailExists) {
      res.status(400).json({ message: "email already used" });
    }
    //create new user
    else {
      const savedUser = await newUser.save();
      res.status(201).json({ message: "Successfully Signed Up", savedUser });
    }
  } catch (err) {
    res.status(500).json({ message: "SignUp Unsuccesfull!!!" });
  }
};

//login
const loginUser = async (req, res) => {
  try {
    if (!req.body.email || !req.body.password) {
      res.status(400).json({ message: "Please fill all the fields" });
    } else {
      const user = await User.findOne({ email: req.body.email });

      //check user registered or not
      !user &&
        res.status(401).json({
          message: "Login  unsuccessful",
          error: "User not found",
        });

      //decrypyt hashpassword
      const hashedPassword = CryptoJS.AES.decrypt(
        user.password,
        process.env.PASS_SEC
      );
      const pass_word = hashedPassword.toString(CryptoJS.enc.Utf8);

      //check password
      pass_word !== req.body.password &&
       await res.status(401).json({ message: "Wrong password" });

      const accessToken = jwt.sign(
        {
          id: user._id,
        },
        process.env.JWT_SEC,
        { expiresIn: "3d" }
      );
	  

      

      await res.status(201).json({
		   message:"Successfully login",accessToken}
	       );
    
	    }} catch (error) {
    await res.status(500).json({
      message: "Login failed",
	  
    });

  }

};


//register
const registerUser = async (e) => {
    e.preventDefault();
    if (password !== password2) {
      setErrorMessage("Passwords don't match");
    } else {
      await axios
        .post("http://localhost:5001/api/auth/register", formData)
        .then((res) => {
          if (res.data.message === "Successfully Signed Up")
            navigate("/regsuccess");
          // do good things
        })
        .catch((err) => {
          if (err.response) {
            console.log(err.response.data.message);
            setErrorMessage(err.response.data.message);
          }
        });
    }
  };